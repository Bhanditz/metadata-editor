import sbt._
import Process._
import java.lang.{ProcessBuilder => PB}
import java.io.File

class ScalaMetadataEditorProject(info: ProjectInfo) extends DefaultProject(info)
{
  def extraResources = "LICENSE" +++ "COPYING" +++ "README.md"
  override def mainResources = super.mainResources +++ extraResources
  
  val jena = "com.hp.hpl.jena" % "jena" % "2.6.2"
  val scalaSwing = "org.scala-lang" % "scala-swing" % "2.8.0.RC6"

  override def packageOptions: Seq[PackageOption] = MainClass("org.cellml.metadata_editor.MetadataEditor") :: Nil
  //override def shouldCheckOutputDirectories = false
  //override def updateAction = task { None }

  //lazy val main  = project(".", "foo", new MainProject(_))
  //lazy val tests = project(".", "foo", new MainProject(_))
  lazy val hi = task { println("Hello World"); None }

  lazy val literatedocs = task {
    val p = "src" / "main" / "scala" / "org" / "cellml" / "metadata_editor"
    val f = p * "*.scala"
    val files = f.get.map(_.asFile.getName())
    val command = Seq("rocco", "-o", "../../../../../../docs", "-l", "scala", "-c", "//") ++ files.toSeq 
    (new PB(command : _*) directory p.asFile) ! ;
    None
  }
  // For the moment, we embed the reponame, temporary directories, etc
  private val repoName = "git@github.com:flaviusb/metadata-editor.git"
  private val repoDir  = "cellml-metadata-editor-gh-pages"
  private val mainDoc  = "metadata-editor.html"
  lazy val initialize_gh_pages = task {
    FileUtilities.doInTemporaryDirectory(new ConsoleLogger())((tmp: File) => {
      (new PB("git", "clone", repoName, repoDir) directory tmp) ! ;
      val tmprep = new File(tmp, repoDir)
      (new PB("git", "symbolic-ref", "HEAD", "refs/heads/gh-pages") directory tmprep) ! ;
      (new PB("rm", ".git/index") directory tmprep) ! ;
      (new PB("git", "clean", "-fdx") directory tmprep) ! ;
      val docs: PathFinder = "docs" ** "*.html"
      docs.get.foreach(a => a.asFile #> new File(tmprep, a.asFile.getName()))
      ("docs" / mainDoc).asFile #> new File(tmprep, "index.html")
      (new PB("git", "add", ".") directory tmprep) ! ;
      (new PB("git", "commit", "-a", "-m", "First commit of autogenerated docs") directory tmprep) ! ;
      (new PB("git", "push", "origin", "gh-pages") directory tmprep) ! ;
      Left("Done")
    })
    None
  } dependsOn(literatedocs)
  lazy val update_gh_pages = task {
    FileUtilities.doInTemporaryDirectory(new ConsoleLogger())((tmp: File) => {
      (new PB("git", "clone", repoName, repoDir) directory tmp) ! ;
      val tmprep = new File(tmp, repoDir)
      (new PB("git", "checkout", "-f", "gh-pages") directory tmprep) ! ;
      (new PB("rm", "-rf", "*") directory tmprep) ! ;
      val docs: PathFinder = "docs" ** "*.html"
      docs.get.foreach(a => a.asFile #> new File(tmprep, a.asFile.getName()))
      ("docs" / mainDoc).asFile #> new File(tmprep, "index.html")
      (new PB("git", "add", "-A") directory tmprep) ! ;
      (new PB("git", "commit", "-a", "-m", "Automatically generated commit from sbt update_gh_pages.") directory tmprep) ! ;
      (new PB("git", "push", "origin", "gh-pages") directory tmprep) ! ;
      Left("Done")
    })
    None
  } dependsOn(literatedocs)
}
